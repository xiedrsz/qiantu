<template>
	<div :style="styles">
		<div class="xs-container">
			<slot></slot>
			<slot name="pulldown"></slot>
			<slot name="pullup"></slot>
		</div>
	</div>
</template>

<script>
	import scroller from './js/scroller.js'

	var pulldownDefaultConfig = function () {
		return {
			content: 'Pull Down To Refresh',
			height: 60,
			autoRefresh: false,
			downContent: 'Pull Down To Refresh',
			upContent: 'Release To Refresh',
			loadingContent: 'Loading...',
			clsPrefix: 'xs-plugin-pulldown-'
		};
	};

	var pullupDefaultConfig = function () {
		return {
			content: 'Pull Up To Refresh',
			pullUpHeight: 60,
			height: 40,
			autoRefresh: false,
			downContent: 'Release To Refresh',
			upContent: 'Pull Up To Refresh',
			loadingContent: 'Loading...',
			clsPrefix: 'xs-plugin-pullup-'
		};
	};

	export default {
		props: {
			height: String,
			lockX: Boolean,
			lockY: Boolean,
			scrollbarX: Boolean,
			scrollbarY: Boolean,
			bounce: {
				type: Boolean,
				default: true
			},
			useOriginScroll: {
				type: Boolean,
				default: false
			},
			useTransition: {
				type: Boolean,
				default: true
			},
			preventDefault: {
				type: Boolean,
				default: true
			},
			stopPropagation: Boolean,
			boundryCheck: {
				type: Boolean,
				default: true
			},
			gpuAcceleration: {
				type: Boolean,
				default: true
			},
			usePulldown: {
				type: Boolean,
				default: false
			},
			usePullup: {
				type: Boolean,
				default: false
			},
			/**
			 * refer to: http://xscroll.github.io/node_modules/xscroll/doc/PullDown.html
			 */
			pulldownConfig: {
				type: Object,
				default () {
					return {}
				}
			},
			pullupConfig: {
				type: Object,
				default () {
					return {}
				}
			},
			pulldownStatus: {
				type: String,
				default: 'default'
			},
			pullupStatus: {
				type: String,
				default: 'default'
			},
			enableHorizontalSwiping: {
				type: Boolean,
				default: false
			}
		},
		methods: {
			reset: function (scrollPosition) {
				if (scrollPosition) {
					if (typeof scrollPosition.left !== 'undefined') {
						this._xscroll.scrollLeft(scrollPosition.left);
					}
					if (typeof scrollPosition.top !== 'undefined') {
						this._xscroll.scrollTop(scrollPosition.top);
					}
				}
				setTimeout(function () {
					this._xscroll && this._xscroll.render();
				});
			}
		},
		compiled: function () {
			this.uuid = Math.random().toString(36).substring(3, 8);
		},
		computed: {
			styles: function () {
				if (!this.height && !this.$el.style.height && this.lockX) {
					this.height = `${document.documentElement.clientHeight}px`;
					this.reset();
				}

				if (this.height && this.height.indexOf('-') === 0) {
					this.height = `${document.documentElement.clientHeight + parseInt(this.height)}px`;
				}

				return {
					height: `${this.height}`
				};
			}
		},
		ready: function () {
			this.$el.setAttribute('id', `vux-scroller-${this.uuid}`);
			var content = null;
			var slotChildren = this.$el.querySelector('.xs-container').childNodes;
			for (var i = 0; i < slotChildren.length; i++) {
				if (slotChildren[i].nodeType === 1) {
					content = slotChildren[i];
					break;
				}
			}
			if (!content) {
				throw new Error('no content is found');
			}

			this._xscroll = new scroller.XScroll({
				renderTo: `#vux-scroller-${this.uuid}`,
				lockX: this.lockX,
				lockY: this.lockY,
				scrollbarX: this.scrollbarX,
				scrollbarY: this.scrollbarY,
				content: content,
				bounce: this.bounce,
				useOriginScroll: this.useOriginScroll,
				useTransition: this.useTransition,
				preventDefault: this.preventDefault,
				boundryCheck: this.boundryCheck,
				gpuAcceleration: this.gpuAcceleration,
				stopPropagation: this.stopPropagation
			});

			if (this.usePulldown) {
				// if use slot=pulldown
				var container = this.$el.querySelector('div[slot="pulldown"]');
				var config = Object.assign(pulldownDefaultConfig(), this.pulldownConfig);
				if (container) {
					config.container = container;
				}
				this.pulldown = new scroller.Pulldown(config);
				this._xscroll.plug(this.pulldown);
				this.pulldown.on('loading', function (e) {
					this.$emit('pulldown:loading', this.uuid);
				});
				this.pulldown.on('statuschange', function (val) {
					this.pulldownStatus = val.newVal;
				});
			}

			if (this.usePullup) {
				// if use slot=pullup
				var container = this.$el.querySelector('div[slot="pullup"]');
				var config = Object.assign(pullupDefaultConfig(), this.pullupConfig);

				if (container) {
					config.container = container;
				}
				this.pullup = new scroller.Pullup(config);
				this._xscroll.plug(this.pullup);
				this.pullup.on('loading', function (e) {
					this.$emit('pullup:loading', this.uuid);
				});
				this.pullup.on('statuschange', function (val) {
					this.pullupStatus = val.newVal;
				});
			}

			if (this.enableHorizontalSwiping) {
				this._xscroll.on('panstart', function (e) {
					if (e.direction === 2 || e.direction === 4) {
						e.preventDefault();
						if (this.scrollbarY) {
							this._xscroll.userConfig.scrollbarY = false;
						}
						this._xscroll.userConfig.lockY = true;
					}
				});
				this._xscroll.on('panend', function () {
					if (this.scrollbarY) {
						this._xscroll.userConfig.scrollbarY = true;
					}
					this._xscroll.userConfig.lockY = false;
				});
			}

			this._xscroll.render();
		},
		events: {
			'pulldown:reset': function (uuid) {
				// set pulldown status to default
				this.pulldownStatus = 'default';
				if (uuid === this.uuid) {
					this.pulldown.reset(function () {
						// repaint
						this.reset();
					});
				}
			},
			'pullup:reset': function (uuid) {
				// set pulldown status to default
				this.pullupStatus = 'default';
				if (uuid === this.uuid) {
					this.pullup.complete();
					this.reset();
				}
			},
			'pullup:done': function (uuid) {
				if (uuid === this.uuid) {
					this._xscroll.unplug(this.pullup);
				}
			},
			'scroller:reset': function (uuid) {
				if (uuid === this.uuid) {
					this.reset();
				}
			},
			'pullup:disable': function (uuid) {
				if (uuid === this.uuid) {
					this.pullup.stop();
				}
			},
			'pullup:enable': function (uuid) {
				if (uuid === this.uuid) {
					this.pullup.restart();
				}
			}
		},
		beforeDestroy: function () {
			if (this.pullup) {
				this._xscroll.unplug(this.pullup);
				this.pullup.pluginDestructor();
			}
			if (this.pulldown) {
				this._xscroll.unplug(this.pulldown);
				this.pulldown.pluginDestructor();
			}
			this._xscroll.destroy();
			this._xscroll = null;
		}
	}
</script>